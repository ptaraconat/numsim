import pytest
import sys as sys 
sys.path.append('.')
from fem.elements import * 
from meshe.mesh import * 

EPSILON = 1e-8

@pytest.fixture()
def tet_fixture(): 
    constructor = Tet4Vector()
    return constructor
@pytest.fixture 
def mesh_fixture():
    mesh = TetraMesh()
    mesh.nodes = np.array([[0, 0, 0],
                           [0, 1, 0],
                           [1, 0, 0],
                           [0, 0, 1],
                           [-1, 0, 0]])
    mesh.elements = np.array([[0, 1, 2, 3],
                              [0,4,1,3]])
    return mesh 

def test_calc_global_bf_derivatives(tet_fixture):
    # test case setup 
    element_coords = np.array([[0, 1, 0],
                               [0, 0, 1],
                               [0., 0., 0.],
                               [1, 0, 0]])
    tet_fixture.set_element(element_coords)
    #
    coords = np.array([1,1,0])
    _, _, inv_jacobian = tet_fixture.calc_jacobian(coords)
    ret_arr = tet_fixture.calc_global_dbf_array_symgrad(coords,inv_jacobian)
    print(ret_arr)
    expected_arr = np.array([[ 0.,   0.,   0.,   0.5,  0.,   0. ],
                             [ 0.,   1.,   0.,   0.,   0.,   0. ],
                             [ 0.,   0.,   0.,   0.,   0.,   0.5],
                             [ 0.,   0.,   0.,   0.,   0.5,  0. ],
                             [ 0.,   0.,   0.,   0.,   0.,   0.5],
                             [ 0.,   0.,   1.,   0.,   0.,   0. ],
                             [-1.,   0.,   0.,  -0.5, -0.5,  0. ],
                             [ 0.,  -1.,   0.,  -0.5,  0.,  -0.5],
                             [ 0.,   0.,  -1.,   0.,  -0.5, -0.5],
                             [ 1.,   0.,   0.,   0.,   0.,   0. ],
                             [ 0.,   0.,   0.,   0.5,  0.,   0. ],
                             [ 0.,   0.,   0.,   0.,   0.5,  0. ]])
    assertion = np.all(ret_arr == expected_arr)
    assert assertion 

def test_calc_stiff_integrand(tet_fixture):
    # test case setup 
    element_coords = np.array([[0, 1, 0],
                               [0, 0, 1],
                               [0., 0., 0.],
                               [1, 0, 0]])
    tet_fixture.set_element(element_coords)
    #
    coords = np.array([0,0,0])
    state_mat = np.array([[1,0,0,0,0,0],
                          [0,1,0,0,0,0],
                          [0,0,1,0,0,0],
                          [0,0,0,1,0,0],
                          [0,0,0,0,1,0],
                          [0,0,0,0,0,1]])
    ret_arr = tet_fixture.calc_stifness_integrand(coords, state_mat)
    expected_arr = np.array([[ 0.25,  0.,    0.,    0.,    0.,    0.,   -0.25, -0.25,  0.,    0.,    0.25,  0.  ],
                             [ 0.,    1.,    0.,    0.,    0.,    0.,    0.,   -1.,    0.,    0.,    0.,    0.  ],
                             [ 0.,    0.,    0.25,  0.,    0.25,  0.,    0.,   -0.25, -0.25,  0.,    0.,    0.  ],
                             [ 0.,    0.,    0.,    0.25,  0.,    0.,   -0.25,  0.,   -0.25,  0.,    0.,    0.25],
                             [ 0.,    0.,    0.25,  0.,    0.25,  0.,    0.,   -0.25, -0.25,  0.,    0.,    0.  ],
                             [ 0.,    0.,    0.,    0.,    0.,    1.,    0.,    0.,   -1.,    0.,    0.,    0.  ],
                             [-0.25,  0.,    0.,   -0.25,  0.,    0.,    1.5,   0.25,  0.25, -1.,   -0.25, -0.25],
                             [-0.25, -1.,   -0.25,  0.,   -0.25,  0.,    0.25,  1.5,   0.25,  0.,   -0.25,  0.  ],
                             [ 0.,    0.,   -0.25, -0.25, -0.25, -1.,    0.25,  0.25,  1.5,   0.,    0.,   -0.25],
                             [ 0.,    0.,    0.,    0.,    0.,    0.,   -1.,    0.,    0.,    1.,    0.,    0.  ],
                             [ 0.25,  0.,    0.,    0.,    0.,    0.,   -0.25, -0.25,  0.,    0.,    0.25,  0.  ],
                             [ 0.,    0.,    0.,    0.25,  0.,    0.,   -0.25,  0.,   -0.25,  0.,    0.,    0.25]])
    
    print(ret_arr)
    assertion = np.all(ret_arr == expected_arr)
    assert assertion 

def test_set_state_mat(tet_fixture): 
    state_arr = np.array([[1,0,0,0,0,0],
                          [0,1,0,0,0,0],
                          [0,0,1,0,0,0],
                          [0,0,0,1,0,0],
                          [0,0,0,0,1,0],
                          [0,0,0,0,0,1]])
    tet_fixture.set_state_matrices(state_arr)
    ret_arr = tet_fixture.state_matrices
    expected_arr = np.zeros((4,6,6))
    for i in range(4): 
        expected_arr[i,:,:] = state_arr
    print(ret_arr)
    assertion = np.all(ret_arr == expected_arr)
    assert assertion
    
def test_stiffness_mat(tet_fixture):
    state_arr = np.array([[1,0,0,0,0,0],
                          [0,1,0,0,0,0],
                          [0,0,1,0,0,0],
                          [0,0,0,1,0,0],
                          [0,0,0,0,1,0],
                          [0,0,0,0,0,1]])
    tet_fixture.set_state_matrices(state_arr)
    ret_arr = tet_fixture.calc_stifness_matrix()
    expected_arr = np.array([[ 0.04166667,  0.,          0.,          0.,          0.,          0.,-0.04166667, -0.04166667,  0.,          0.,          0.04166667,  0.        ],
                             [ 0.,         0.16666667,  0.,          0.,          0.,          0.,0.,         -0.16666667,  0.,          0.,          0.,          0.        ],
                             [ 0.,          0.,          0.04166667,  0.,          0.04166667,  0.,0.,         -0.04166667, -0.04166667,  0.,          0.,          0.        ],
                             [ 0.,          0.,          0.,          0.04166667,  0.,          0.,-0.04166667,  0.,         -0.04166667,  0.,          0.,          0.04166667],
                             [ 0.,          0.,          0.04166667,  0.,          0.04166667,  0.,0.,         -0.04166667, -0.04166667,  0.,          0.,          0.        ],
                             [ 0.,          0.,          0.,          0.,          0.,          0.16666667,0.,         0.,         -0.16666667,  0.,          0.,          0.        ],
                             [-0.04166667,  0.,          0.,         -0.04166667,  0.,          0.,0.25,        0.04166667,  0.04166667, -0.16666667, -0.04166667, -0.04166667],
                             [-0.04166667, -0.16666667, -0.04166667,  0.,         -0.04166667,  0.,0.04166667,  0.25,        0.04166667,  0.,         -0.04166667,  0.        ],
                             [ 0.,         0.,         -0.04166667, -0.04166667, -0.04166667, -0.16666667,0.04166667,  0.04166667,  0.25,        0.,          0.,         -0.04166667],
                             [ 0.,          0.,          0.,          0.,          0.,          0.,-0.16666667,  0.,          0.,         0.16666667,  0.,          0.        ],
                             [ 0.04166667,  0.,          0.,          0.,          0.,          0.,-0.04166667, -0.04166667,  0.,         0.,          0.04166667,  0.        ],
                             [ 0.,          0.,          0.,          0.04166667,  0.,          0.,-0.04166667,  0.,         -0.04166667,  0.,          0.,          0.04166667]])
    print(ret_arr)
    #print(np.shape(ret_arr))
    #print(np.abs(ret_arr-expected_arr))
    assertion = np.all(np.abs(ret_arr-expected_arr)<EPSILON) 
    assert assertion 

def test_global_stiffness(tet_fixture,mesh_fixture): 
    # set state data 
    state_data = 'conductivity'
    nnodes = np.size(mesh_fixture.nodes,0)
    ndim = 6
    state = np.zeros((nnodes,ndim,ndim))
    identity = np.identity(ndim)
    for i in range(nnodes): 
        state[i,:,:] = identity
    mesh_fixture.nodes_data[state_data] = state
    #
    ret_arr = tet_fixture.calc_global_stiffness_matrix( mesh_fixture, state_data)
    expected_arr = np.array([[-0.5,0.,0.,0.08333333,0.,0.,0.16666667,0.04166667,0.04166667,0.08333333,0.,0.,0.16666667,-0.04166667,-0.04166667],
                             [0.,-0.5,-0.08333333,0.,0.33333333,0.08333333,0.,0.04166667,0.,0.,0.08333333,0.,0.,0.04166667,0.],
                             [0.,-0.08333333,-0.5,0.,0.,0.08333333,0.,0.,0.04166667,0.,0.08333333,0.33333333,0.,0.,0.04166667],
                             [0.08333333,0.,0.,-0.08333333,0.,0.,0.,-0.04166667,0.,0.,0.,0.,0.,0.04166667,0.],
                             [0.,0.33333333,0.,0.,-0.33333333,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
                             [0.,0.08333333,0.08333333,0.,0.,-0.08333333,0.,0.,0.,0.,-0.08333333,0.,0.,0.,0.],
                             [0.16666667,0.,0.,0.,0.,0.,-0.16666667,0.,0.,0.,0.,0.,0.,0.,0.],
                             [0.04166667,0.04166667,0.,-0.04166667,0.,0.,0.,-0.04166667,0.,0.,0.,0.,0.,0.,0.],
                             [0.04166667,0.,0.04166667,0.,0.,0.,0.,0.,-0.04166667,-0.04166667,0.,0.,0.,0.,0.],
                             [0.08333333,0.,0.,0.,0.,0.,0.,0.,-0.04166667,-0.08333333,0.,0.,0.,0.,0.04166667],
                             [0.,0.08333333,0.08333333,0.,0.,-0.08333333,0.,0.,0.,0.,-0.08333333,0.,0.,0.,0.],
                             [0.,0.,0.33333333,0.,0.,0.,0.,0.,0.,0.,0.,-0.33333333,0.,0.,0.],
                             [0.16666667,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,-0.16666667,0.,0.],
                             [-0.04166667,0.04166667,0.,0.04166667,0.,0.,0.,0.,0.,0.,0.,0.,0.,-0.04166667,0.],
                             [-0.04166667,0.,0.04166667,0.,0.,0.,0.,0.,0.,0.04166667,0.,0.,0.,0.,-0.04166667]])
    print(ret_arr)
    #print(np.abs(ret_arr-expected_arr))
    assertion = np.all(np.abs(ret_arr-expected_arr)<EPSILON) 
    assert assertion 

def test_stress_computation(tet_fixture):
    element_coords = np.array([[0, 1, 0],
                               [0, 0, 1],
                               [0., 0., 0.],
                               [1, 0, 0]])
    arr_tmp = np.array([[1,0,0,0,0,0],
                          [0,1,0,0,0,0],
                          [0,0,1,0,0,0],
                          [0,0,0,1,0,0],
                          [0,0,0,0,1,0],
                          [0,0,0,0,0,1]])
    state_arr = np.zeros((4,6,6))
    for i in range(4):
        state_arr[i,:,:] = arr_tmp
    disp_arr = np.array([[0,0,0],
                         [0,0,0.1],
                         [0,0,0],
                         [0,0,0]])
    tet_fixture.set_element(element_coords)
    ret_arr = tet_fixture.calc_stress_tensor(disp_arr,state_arr)
    expected_arr = np.array([0, 0, 0.1, 0, 0, 0])
    assertion = np.all(ret_arr == expected_arr)
    assert assertion 

def test_calc_massmat_integrand(tet_fixture):
    # test case setup 
    element_coords = np.array([[0, 1, 0],
                               [0, 0, 1],
                               [0., 0., 0.],
                               [1, 0, 0]])
    tet_fixture.set_element(element_coords)
    #
    coords = np.array([0.2,0.2,0.2])
    rho_value = 1000
    ret_arr = tet_fixture.calc_massmat_integrand(coords, rho_value)
    print(ret_arr)
    expected_arr = np.array([[40.,0.,0.,40.,0.,0.,80.,0.,0.,40.,0.,0.],
                             [0.,40.,0.,0.,40.,0.,0.,80.,0.,0.,40.,0.],
                             [0.,0.,40.,0.,0.,40.,0.,0.,80.,0.,0.,40.],
                             [40.,0.,0.,40.,0.,0.,80.,0.,0.,40.,0.,0.],
                             [0.,40.,0.,0.,40.,0.,0.,80.,0.,0.,40.,0.],
                             [0.,0.,40.,0.,0.,40.,0.,0.,80.,0.,0.,40.],
                             [80.,0.,0.,80.,0.,0.,160.,0.,0.,80.,0.,0.],
                             [0.,80.,0.,0.,80.,0.,0.,160.,0.,0.,80.,0.],
                             [0.,0.,80.,0.,0.,80.,0.,0.,160.,0.,0.,80.],
                             [40.,0.,0.,40.,0.,0.,80.,0.,0.,40.,0.,0.],
                             [0.,40.,0.,0.,40.,0.,0.,80.,0.,0.,40.,0.],
                             [0.,0.,40.,0.,0.,40.,0.,0.,80.,0.,0.,40.]])
    print(np.abs(expected_arr-ret_arr))
    assertion = np.all(np.abs(expected_arr-ret_arr)<EPSILON)
    assert assertion 

def test_mass_mat(tet_fixture):
    rho_value = np.array([1,1,1,1])
    tet_fixture.set_rho_values(rho_value)
    #print(tet_fixture.rho_values)
    ret_arr = tet_fixture.calc_mass_matrix()
    expected_arr = np.array([[0.01666667,0.,0.,0.00833333,0.,0.,0.00833333,0.,0.,0.00833333,0.,0.],
                             [0.,0.01666667,0.,0.,0.00833333,0.,0.,0.00833333,0.,0.,0.00833333,0.],
                             [0.,0.,0.01666667,0.,0.,0.00833333,0.,0.,0.00833333,0.,0.,0.00833333],
                             [0.00833333,0.,0.,0.01666667,0.,0.,0.00833333,0.,0.,0.00833333,0.,0.],
                             [0.,0.00833333,0.,0.,0.01666667,0.,0.,0.00833333,0.,0.,0.00833333,0.],
                             [0.,0.,0.00833333,0.,0.,0.01666667,0.,0.,0.00833333,0.,0.,0.00833333],
                             [0.00833333,0.,0.,0.00833333,0.,0.,0.01666667,0.,0.,0.00833333,0.,0.],
                             [0.,0.00833333,0.,0.,0.00833333,0.,0.,0.01666667,0.,0.,0.00833333,0.],
                             [0.,0.,0.00833333,0.,0.,0.00833333,0.,0.,0.01666667,0.,0.,0.00833333],
                             [0.00833333,0.,0.,0.00833333,0.,0.,0.00833333,0.,0.,0.01666667,0.,0.],
                             [0.,0.00833333,0.,0.,0.00833333,0.,0.,0.00833333,0.,0.,0.01666667,0.],
                             [0.,0.,0.00833333,0.,0.,0.00833333,0.,0.,0.00833333,0.,0.,0.01666667]])
    print(ret_arr)
    print(np.shape(ret_arr))
    print(np.abs(ret_arr-expected_arr))
    assertion = np.all(np.abs(ret_arr-expected_arr)<EPSILON) 
    assert assertion 

def test_global_mass(tet_fixture,mesh_fixture): 
    # set state data 
    state_data = 'rho'
    nnodes = np.size(mesh_fixture.nodes,0)
    rho_vec = np.zeros((nnodes))
    rho_val = 1000
    for i in range(nnodes): 
        rho_vec[i] = rho_val
    mesh_fixture.nodes_data[state_data] = rho_vec
    #
    ret_arr = tet_fixture.calc_global_mass_matrix( mesh_fixture, state_data)
    expected_arr = np.array([[-33.33333333,0.,0.,-16.66666667,0.,0.,-8.33333333,0.,0.,-16.66666667,0.,0.,-8.33333333,0.,0.],
                             [0.,-33.33333333,0.,0.,-16.66666667,0.,0.,-8.33333333,0.,0.,-16.66666667,0.,0.,-8.33333333,0.],
                             [0.,0.,-33.33333333,0.,0.,-16.66666667,0.,0.,-8.33333333,0.,0.,-16.66666667,0.,0.,-8.33333333],
                             [-16.66666667,0.,0.,-33.33333333,0.,0.,-8.33333333,0.,0.,-16.66666667,0.,0.,-8.33333333,0.,0.],
                             [0.,-16.66666667,0.,0.,-33.33333333,0.,0.,-8.33333333,0.,0.,-16.66666667,0.,0.,-8.33333333,0.],
                             [0.,0.,-16.66666667,0.,0.,-33.33333333,0.,0.,-8.33333333,0.,0.,-16.66666667,0.,0.,-8.33333333],
                             [-8.33333333,0.,0.,-8.33333333,0.,0.,-16.66666667,0.,0.,-8.33333333,0.,0.,0.,0.,0.],
                             [0.,-8.33333333,0.,0.,-8.33333333,0.,0.,-16.66666667,0.,0.,-8.33333333,0.,0.,0.,0.],
                             [0.,0.,-8.33333333,0.,0.,-8.33333333,0.,0.,-16.66666667,0.,0.,-8.33333333,0.,0.,0.],
                             [-16.66666667,0.,0.,-16.66666667,0.,0.,-8.33333333,0.,0.,-33.33333333,0.,0.,-8.33333333,0.,0.],
                             [0.,-16.66666667,0.,0.,-16.66666667,0.,0.,-8.33333333,0.,0.,-33.33333333,0.,0.,-8.33333333,0.],
                             [0.,0.,-16.66666667,0.,0.,-16.66666667,0.,0.,-8.33333333,0.,0.,-33.33333333,0.,0.,-8.33333333],
                             [-8.33333333,0.,0.,-8.33333333,0.,0.,0.,0.,0.,-8.33333333,0.,0.,-16.66666667,0.,0.],
                             [0.,-8.33333333,0.,0.,-8.33333333,0.,0.,0.,0.,0.,-8.33333333,0.,0.,-16.66666667,0.],
                             [0.,0.,-8.33333333,0.,0.,-8.33333333,0.,0.,0.,0.,0.,-8.33333333,0.,0.,-16.66666667]])
    print(ret_arr)
    print(np.abs(ret_arr-expected_arr) )
    assertion = np.all(np.abs(ret_arr-expected_arr)<EPSILON) 
    assert assertion 